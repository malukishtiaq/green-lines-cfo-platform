// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(ADMIN)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks TaskAssignment[]
  createdTasks  Task[]           @relation("TaskCreator")
  updatedTasks  Task[]           @relation("TaskUpdater")

  // Contract relations
  createdContracts Contract[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  VIEWER
}

// Customer Management
model Customer {
  id        String         @id @default(cuid())
  name      String
  email     String         @unique
  phone     String?
  company   String?
  address   String?
  city      String?
  country   String         @default("UAE")
  industry  String?
  size      CompanySize?
  status    CustomerStatus @default(ACTIVE)
  notes     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  servicePlans   ServicePlan[]
  tasks          Task[]
  communications Communication[]

  // Contract relations
  contracts Contract[]

  // Plan Builder relations
  plans Plan[]

  @@map("customers")
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PROSPECT
}

// Service Plans
model ServicePlan {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        ServiceType
  status      ServiceStatus @default(ACTIVE)
  price       Decimal?
  currency    String        @default("AED")
  duration    Int? // in months
  features    Json? // Store plan features as JSON
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tasks      Task[]

  @@map("service_plans")
}

enum ServiceType {
  BASIC_CFO
  PREMIUM_CFO
  ENTERPRISE_CFO
  CONSULTING
  AUDIT
  TAX_FILING
  CUSTOM
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  COMPLETED
}

// Task Management
model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  type           TaskType
  priority       Priority   @default(MEDIUM)
  status         TaskStatus @default(PENDING)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Int?
  actualHours    Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  customerId    String
  customer      Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  servicePlanId String?
  servicePlan   ServicePlan?     @relation(fields: [servicePlanId], references: [id])
  createdById   String
  createdBy     User             @relation("TaskCreator", fields: [createdById], references: [id])
  updatedById   String?
  updatedBy     User?            @relation("TaskUpdater", fields: [updatedById], references: [id])
  assignments   TaskAssignment[]

  @@map("tasks")
}

enum TaskType {
  FINANCIAL_REVIEW
  TAX_PREPARATION
  BUDGET_PLANNING
  AUDIT_SUPPORT
  COMPLIANCE_CHECK
  REPORTING
  CONSULTATION
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

// Task Assignments
model TaskAssignment {
  id         String           @id @default(cuid())
  assignedAt DateTime         @default(now())
  status     AssignmentStatus @default(ASSIGNED)
  notes      String?

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignments")
}

enum AssignmentStatus {
  ASSIGNED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Communication Log
model Communication {
  id        String                 @id @default(cuid())
  type      CommunicationType
  subject   String?
  content   String
  direction CommunicationDirection
  createdAt DateTime               @default(now())

  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communications")
}

enum CommunicationType {
  EMAIL
  PHONE
  MEETING
  CHAT
  DOCUMENT
  OTHER
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

// System Settings
model Setting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?

  @@map("settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// Partner Management
model Partner {
  id                String              @id @default(cuid())
  name              String
  email             String?
  phone             String?
  country           String
  city              String? // City for same-city matching
  address           String? // Full address
  latitude          Float? // For distance calculation
  longitude         Float? // For distance calculation
  domain            String // Area of expertise e.g., Odoo, Stock Count
  role              PartnerRole // Functional role e.g., Technical, Accounts, ERP Consultant
  specialties       Json? // Array of service specialties e.g., ["Network Infrastructure", "Security Systems"]
  rating            Float?              @default(0) // 0-5 star rating
  activeEngagements Int                 @default(0) // Current workload
  availability      PartnerAvailability @default(AVAILABLE)
  remoteOk          Boolean             @default(false) // Can work remotely
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([country])
  @@index([city])
  @@index([domain])
  @@index([role])
  @@index([latitude, longitude])
  @@map("partners")
}

enum PartnerRole {
  ERP_CONSULTANT
  TECHNICAL
  ACCOUNTS
  STOCK_COUNT
  IMPLEMENTATION
  TRAINING
  OTHER
}

enum PartnerAvailability {
  AVAILABLE // Within 24 hours
  MODERATE // Within 48 hours
  BUSY // Within 72 hours
  UNAVAILABLE // Not available
}

// Contracts & Templates

enum ContractType {
  SERVICE_AGREEMENT
  NDA
  MSA
  SOW
  PROPOSAL
  CUSTOM
}

enum ContractStatus {
  DRAFT
  GENERATED
  SENT
  VIEWED
  SIGNED
  FAILED
}

enum Brand {
  GREENLINES
  GLERP
  OTHER
}

enum AIProvider {
  OPENAI
  GEMINI
  ANTHROPIC
  CUSTOM
}

model CompanyProfile {
  id          String   @id @default(cuid())
  name        String // Display name e.g., Green Lines, GLERP
  brand       Brand
  legalName   String
  email       String
  phone       String?
  address     String?
  city        String?
  country     String?
  logoUrl     String?
  signerName  String?
  signerTitle String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contracts Contract[]

  @@map("company_profiles")
}

model ContractTemplate {
  id             String       @id @default(cuid())
  name           String
  type           ContractType
  language       String       @default("en") // en or ar; UI will control RTL/LTR
  industry       String?
  brand          Brand?
  defaultContent String // Template text with placeholders like {{companyName}}
  variables      Json? // e.g., ["companyName","price","currency","termMonths"]
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  contracts Contract[]

  @@map("contract_templates")
}

model Contract {
  id               String         @id @default(cuid())
  type             ContractType
  status           ContractStatus @default(DRAFT)
  language         String         @default("en")
  industry         String?
  variables        Json? // Resolved variables for this instance
  generatedContent String? // Raw generated text (optional)
  pdfPath          String? // Stored PDF path/key
  aiProvider       AIProvider? // Which AI was used to generate
  sentAt           DateTime?
  signedAt         DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  templateId String?
  template   ContractTemplate? @relation(fields: [templateId], references: [id])

  senderCompanyId String
  senderCompany   CompanyProfile @relation(fields: [senderCompanyId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  recipientEmail String
  recipientName  String?
  createdById    String
  createdBy      User    @relation(fields: [createdById], references: [id])

  @@index([type])
  @@index([status])
  @@index([senderCompanyId])
  @@index([customerId])
  @@map("contracts")
}

// Plan Builder - Service Plans
model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Basic Information (Stage 1)
  industry           String
  companySize        String
  durationType       String    @default("WEEKS")
  durationWeeks      Int?
  startDate          DateTime?
  workingDays        Int       @default(5)
  address            String?
  siteType           String?
  accessRequirements String?

  // Plan Status
  status       PlanStatus @default(DRAFT)
  currentStage Int        @default(1)
  totalStages  Int        @default(7)
  totalBudget  Decimal    @default(0)
  currency     String     @default("SAR")
  notes        String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  milestones  Milestone[]
  resources   Resource[]
  attachments Attachment[]

  @@map("plans")
}

enum PlanStatus {
  DRAFT
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Plan Milestones (Stage 2)
model Milestone {
  id     String @id @default(cuid())
  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  sequence         Int
  name             String
  description      String?
  durationWeeks    Int
  budgetAllocation Decimal // Percentage (0-100)
  deliverables     String?
  dependencies     String? // JSON array of milestone IDs
  isCriticalPath   Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("milestones")
}

// Plan Resources (Stage 3)
model Resource {
  id     String @id @default(cuid())
  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  name        String
  type        ResourceType
  quantity    Int          @default(1)
  cost        Decimal?
  currency    String       @default("SAR")
  description String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

enum ResourceType {
  HUMAN_RESOURCE
  EQUIPMENT
  SOFTWARE
  MATERIAL
  OTHER
}

// Plan Attachments (Stage 6)
model Attachment {
  id     String @id @default(cuid())
  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  name        String
  type        String
  size        Int
  url         String
  description String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attachments")
}
