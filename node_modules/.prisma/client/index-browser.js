
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  avatar: 'avatar',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company',
  address: 'address',
  city: 'city',
  country: 'country',
  industry: 'industry',
  size: 'size',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicePlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  status: 'status',
  price: 'price',
  currency: 'currency',
  duration: 'duration',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  priority: 'priority',
  status: 'status',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  servicePlanId: 'servicePlanId',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.TaskAssignmentScalarFieldEnum = {
  id: 'id',
  assignedAt: 'assignedAt',
  status: 'status',
  notes: 'notes',
  taskId: 'taskId',
  userId: 'userId'
};

exports.Prisma.CommunicationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  subject: 'subject',
  content: 'content',
  direction: 'direction',
  createdAt: 'createdAt',
  customerId: 'customerId'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  description: 'description'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  country: 'country',
  city: 'city',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  domain: 'domain',
  role: 'role',
  specialties: 'specialties',
  rating: 'rating',
  activeEngagements: 'activeEngagements',
  availability: 'availability',
  remoteOk: 'remoteOk',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brand: 'brand',
  legalName: 'legalName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  country: 'country',
  logoUrl: 'logoUrl',
  signerName: 'signerName',
  signerTitle: 'signerTitle',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  language: 'language',
  industry: 'industry',
  brand: 'brand',
  defaultContent: 'defaultContent',
  variables: 'variables',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  language: 'language',
  industry: 'industry',
  variables: 'variables',
  generatedContent: 'generatedContent',
  pdfPath: 'pdfPath',
  aiProvider: 'aiProvider',
  sentAt: 'sentAt',
  signedAt: 'signedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  templateId: 'templateId',
  senderCompanyId: 'senderCompanyId',
  customerId: 'customerId',
  recipientEmail: 'recipientEmail',
  recipientName: 'recipientName',
  createdById: 'createdById'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  customerId: 'customerId',
  industry: 'industry',
  companySize: 'companySize',
  durationType: 'durationType',
  durationWeeks: 'durationWeeks',
  startDate: 'startDate',
  workingDays: 'workingDays',
  address: 'address',
  siteType: 'siteType',
  accessRequirements: 'accessRequirements',
  status: 'status',
  currentStage: 'currentStage',
  totalStages: 'totalStages',
  totalBudget: 'totalBudget',
  currency: 'currency',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  sequence: 'sequence',
  name: 'name',
  description: 'description',
  durationWeeks: 'durationWeeks',
  budgetAllocation: 'budgetAllocation',
  deliverables: 'deliverables',
  dependencies: 'dependencies',
  isCriticalPath: 'isCriticalPath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  name: 'name',
  type: 'type',
  quantity: 'quantity',
  cost: 'cost',
  currency: 'currency',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  name: 'name',
  type: 'type',
  size: 'size',
  url: 'url',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  AGENT: 'AGENT',
  VIEWER: 'VIEWER'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  STARTUP: 'STARTUP',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.CustomerStatus = exports.$Enums.CustomerStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PROSPECT: 'PROSPECT'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  BASIC_CFO: 'BASIC_CFO',
  PREMIUM_CFO: 'PREMIUM_CFO',
  ENTERPRISE_CFO: 'ENTERPRISE_CFO',
  CONSULTING: 'CONSULTING',
  AUDIT: 'AUDIT',
  TAX_FILING: 'TAX_FILING',
  CUSTOM: 'CUSTOM'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  COMPLETED: 'COMPLETED'
};

exports.TaskType = exports.$Enums.TaskType = {
  FINANCIAL_REVIEW: 'FINANCIAL_REVIEW',
  TAX_PREPARATION: 'TAX_PREPARATION',
  BUDGET_PLANNING: 'BUDGET_PLANNING',
  AUDIT_SUPPORT: 'AUDIT_SUPPORT',
  COMPLIANCE_CHECK: 'COMPLIANCE_CHECK',
  REPORTING: 'REPORTING',
  CONSULTATION: 'CONSULTATION',
  OTHER: 'OTHER'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  ASSIGNED: 'ASSIGNED',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.CommunicationType = exports.$Enums.CommunicationType = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  MEETING: 'MEETING',
  CHAT: 'CHAT',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

exports.CommunicationDirection = exports.$Enums.CommunicationDirection = {
  INBOUND: 'INBOUND',
  OUTBOUND: 'OUTBOUND'
};

exports.SettingType = exports.$Enums.SettingType = {
  STRING: 'STRING',
  NUMBER: 'NUMBER',
  BOOLEAN: 'BOOLEAN',
  JSON: 'JSON'
};

exports.PartnerRole = exports.$Enums.PartnerRole = {
  ERP_CONSULTANT: 'ERP_CONSULTANT',
  TECHNICAL: 'TECHNICAL',
  ACCOUNTS: 'ACCOUNTS',
  STOCK_COUNT: 'STOCK_COUNT',
  IMPLEMENTATION: 'IMPLEMENTATION',
  TRAINING: 'TRAINING',
  OTHER: 'OTHER'
};

exports.PartnerAvailability = exports.$Enums.PartnerAvailability = {
  AVAILABLE: 'AVAILABLE',
  MODERATE: 'MODERATE',
  BUSY: 'BUSY',
  UNAVAILABLE: 'UNAVAILABLE'
};

exports.Brand = exports.$Enums.Brand = {
  GREENLINES: 'GREENLINES',
  GLERP: 'GLERP',
  OTHER: 'OTHER'
};

exports.ContractType = exports.$Enums.ContractType = {
  SERVICE_AGREEMENT: 'SERVICE_AGREEMENT',
  NDA: 'NDA',
  MSA: 'MSA',
  SOW: 'SOW',
  PROPOSAL: 'PROPOSAL',
  CUSTOM: 'CUSTOM'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  DRAFT: 'DRAFT',
  GENERATED: 'GENERATED',
  SENT: 'SENT',
  VIEWED: 'VIEWED',
  SIGNED: 'SIGNED',
  FAILED: 'FAILED'
};

exports.AIProvider = exports.$Enums.AIProvider = {
  OPENAI: 'OPENAI',
  GEMINI: 'GEMINI',
  ANTHROPIC: 'ANTHROPIC',
  CUSTOM: 'CUSTOM'
};

exports.PlanStatus = exports.$Enums.PlanStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  HUMAN_RESOURCE: 'HUMAN_RESOURCE',
  EQUIPMENT: 'EQUIPMENT',
  SOFTWARE: 'SOFTWARE',
  MATERIAL: 'MATERIAL',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  ServicePlan: 'ServicePlan',
  Task: 'Task',
  TaskAssignment: 'TaskAssignment',
  Communication: 'Communication',
  Setting: 'Setting',
  Partner: 'Partner',
  CompanyProfile: 'CompanyProfile',
  ContractTemplate: 'ContractTemplate',
  Contract: 'Contract',
  Plan: 'Plan',
  Milestone: 'Milestone',
  Resource: 'Resource',
  Attachment: 'Attachment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
