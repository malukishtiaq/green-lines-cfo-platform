import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    const tasks = await prisma.task.findMany({
      take: 10,
      orderBy: {
        createdAt: 'desc'
      },
      include: {
        customer: true,
        assignments: {
          include: {
            user: true
          }
        }
      }
    });

    // Prisma Decimal fields (budget, actualCost) serialize as objects/strings.
    // Normalize to plain numbers for the client to consume safely.
    const normalized = tasks.map((t: any) => ({
      ...t,
      budget: t.budget != null ? Number(t.budget) : null,
      actualCost: t.actualCost != null ? Number(t.actualCost) : null,
    }));

    return NextResponse.json(normalized);
  } catch (error) {
    console.error('Error fetching tasks:', error);
    return NextResponse.json(
      { error: 'Failed to fetch tasks' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const {
      title,
      description,
      type,
      priority,
      status = 'PENDING',
      budget,
      actualCost,
      dueDate,
      estimatedHours,
      customerId,
      createdById,
    } = body || {};

    if (!title || !type || !priority || !customerId) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    // Fallback creator if not provided
    let creatorId = createdById as string | undefined;
    if (!creatorId) {
      const anyUser = await prisma.user.findFirst({ select: { id: true } });
      creatorId = anyUser?.id;
    }
    if (!creatorId) {
      return NextResponse.json({ error: 'No creator available' }, { status: 400 });
    }

    const created = await prisma.task.create({
      data: {
        title,
        description,
        type,
        priority,
        status,
        budget: budget != null ? Number(budget) : undefined,
        actualCost: actualCost != null ? Number(actualCost) : undefined,
        dueDate: dueDate ? new Date(dueDate) : undefined,
        estimatedHours: estimatedHours != null ? Number(estimatedHours) : undefined,
        customerId,
        createdById: creatorId,
      },
      include: {
        customer: true,
        assignments: { include: { user: true } },
      },
    });

    const normalized = {
      ...created,
      budget: created.budget != null ? Number(created.budget) : null,
      actualCost: created.actualCost != null ? Number(created.actualCost) : null,
    };

    return NextResponse.json(normalized, { status: 201 });
  } catch (error) {
    console.error('Error creating task:', error);
    return NextResponse.json({ error: 'Failed to create task' }, { status: 500 });
  }
}

