'use client';

import React, { createContext, useContext, useState } from 'react';
import { ConfigProvider, theme, App } from 'antd';
import { currentTheme } from './theme';

interface ThemeContextType {
  currentTheme: 'light' | 'dark';
  toggleTheme: () => void;
  themeConfig: typeof currentTheme;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

interface ThemeProviderProps {
  children: React.ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [isDark, setIsDark] = useState<'light' | 'dark'>('light');

  const toggleTheme = () => {
    setIsDark(prev => prev === 'light' ? 'dark' : 'light');
  };

  const antdTheme = {
    algorithm: isDark === 'dark' ? theme.darkAlgorithm : theme.defaultAlgorithm,
    token: {
      colorPrimary: currentTheme.colors.primary,
      colorSuccess: currentTheme.colors.success,
      colorWarning: currentTheme.colors.warning,
      colorError: currentTheme.colors.error,
      colorInfo: currentTheme.colors.info,
      fontFamily: currentTheme.typography.fontFamily.primary,
      fontSize: currentTheme.typography.fontSize.base,
      borderRadius: currentTheme.borderRadius.md,
    },
    components: {
      Button: {
        borderRadius: currentTheme.borderRadius.md,
        controlHeight: currentTheme.components.button.height.medium,
      },
      Card: {
        borderRadius: currentTheme.components.card.borderRadius,
        boxShadow: currentTheme.components.card.boxShadow,
        padding: currentTheme.components.card.padding,
      },
      Input: {
        borderRadius: currentTheme.components.input.borderRadius,
        controlHeight: currentTheme.components.input.height,
      },
      Layout: {
        bodyBg: currentTheme.colors.background,
        headerBg: currentTheme.colors.background,
        siderBg: currentTheme.colors.background,
      },
    },
  };

  return (
    <ThemeContext.Provider value={{ 
      currentTheme: isDark, 
      toggleTheme, 
      themeConfig: currentTheme 
    }}>
      <ConfigProvider theme={antdTheme}>
        <App>
          <div data-theme={isDark}>
            {children}
          </div>
        </App>
      </ConfigProvider>
    </ThemeContext.Provider>
  );
};
